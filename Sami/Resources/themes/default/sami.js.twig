Sami = {
    searchTypeClasses: {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    }
};

// Cleans the provided search term, or gets the term from the query string
// if it is not provided.
Sami.cleanSearchTerm = function(term) {
    // Grab from the query string
    if (typeof term === 'undefined') {
        var name = 'search';
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
        var results = regex.exec(location.search);
        if (results === null) {
            return null;
        }
        term = decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    return term.replace(/<(?:.|\n)*?>/gm, '');
};

// Searches through the search index for matches
Sami.search = function(term) {
    var lterm = term.toLowerCase(), results = [];
    for (var i = 0, len = Sami.searchIndex.length; i < len; i++) {
        var ele = Sami.searchIndex[i];
        if (ele.name && ele.name.toLowerCase().indexOf(lterm) > -1) {
            results.push(ele);
        }
    }
    return results;
};

// Get a search class for a specific type
Sami.getSearchClass = function(type) {
    return Sami.searchTypeClasses[type] || Sami.searchTypeClasses['_'];
}

Sami.searchIndex = [
    {% block search_index %}
        {% for ns in namespaces -%}
            {"type": "Namespace", "link": "{{ namespace_path(ns) }}", "name": "{{ ns|replace({'\\': '\\\\'}) }}", "doc": "Namespace {{ ns|replace({'\\': '\\\\'}) }}"},
        {%- endfor %}

        {% for class in interfaces -%}
            {"type": "Interface", {% if class.namespace %}"fromName": "{{ class.namespace|replace({'\\': '\\\\'}) }}", "fromLink": "{{ namespace_path(class.namespace) }}",{% endif %} "link": "{{ class_path(class) }}", "name": "{{ class.name|replace({'\\': '\\\\'}) }}", "doc": "{{ class.shortdesc|desc(class)|json_encode }}"},
            {{ _self.add_class_methods_index(class) }}
        {% endfor %}

        {% for class in classes -%}
            {"type": {% if class.isTrait %}"Trait"{% else %}"Class"{% endif %}, {% if class.namespace %}"fromName": "{{ class.namespace|replace({'\\': '\\\\'}) }}", "fromLink": "{{ namespace_path(class.namespace) }}",{% endif %} "link": "{{ class_path(class) }}", "name": "{{ class.name|replace({'\\': '\\\\'}) }}", "doc": "{{ class.shortdesc|desc(class)|json_encode }}"},
            {{ _self.add_class_methods_index(class) }}
        {% endfor %}

        {# Override this block, search_index_extra, to add custom search entries! #}
        {% block search_index_extra '' %}
    {% endblock %}
    // Fix trailing commas in the index
    {}
];

{% macro add_class_methods_index(class) %}
    {% if class.methods %}
        {% set from_name = class.name|replace({'\\': '\\\\'}) %}
        {% set from_link = class_path(class) %}
        {% for meth in class.methods %}
            {"type": "Method", "fromName": "{{ from_name }}", "fromLink": "{{ from_link }}", "link": "{{ method_path(meth) }}", "name": "{{ meth|replace({'\\': '\\\\'}) }}", "doc": "{{ meth.shortdesc|desc(class)|json_encode }}"},
        {% endfor %}
    {% endif %}
{% endmacro %}

Sami.treeHtml = '{{ _self.element(tree, project.config('default_opened_level'), 0)|replace({"'": "\\'", "\n": ''})|raw }}';

$(function() {

    // Add the left-nav tree to the page.
    $('#api-tree').html(Sami.treeHtml);

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    {% block treejs %}

        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#left-column');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    {% endblock %}
});

{% macro element(tree, opened, depth) %}
    <ul>
        {%- for element in tree -%}
            {% if element[2] %}
                <li data-name="namespace:{{ element[1]|replace({'\\': '_'}) }}" {% if depth < opened %}class="opened"{% endif %}>
                    <div style="padding-left:{{ depth * 18 }}px" class="hd">
                        <span class="glyphicon glyphicon-play"></span>{% if not project.config('simulate_namespaces') %}<a href="{{ namespace_path(element[1]) }}">{% endif %}{{ element[0] }}{% if not project.config('simulate_namespaces') %}</a>{% endif %}
                    </div>
                    <div class="bd">
                        {{ _self.element(element[2], opened, depth + 1) -}}
                    </div>
                </li>
            {% else %}
                <li data-name="class:{{ (element[1].name)|replace({'\\': '_'}) }}" {% if depth < opened %}class="opened"{% endif %}>
                    <div style="padding-left:{{ 8 + (depth * 18) }}px" class="hd leaf">
                        <a href="{{ class_path(element[1]) }}">{{ element[0] }}</a>
                    </div>
                </li>
            {% endif %}
        {%- endfor %}
    </ul>
{% endmacro %}
